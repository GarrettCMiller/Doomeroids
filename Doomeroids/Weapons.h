#pragma once 

#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>
#using <mscorlib.dll>

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 
namespace Doomeroids {
    using namespace System;
    using namespace System::Data;
    using namespace System::Xml;
    using namespace System::Runtime::Serialization;
    
    using namespace System;
    public __gc class Weapons;
    
    
    [Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(S"code"), 
    System::Diagnostics::DebuggerStepThrough, 
    System::ComponentModel::ToolboxItem(true)]
    public __gc class Weapons : public System::Data::DataSet {
        public : __gc class WeaponDataTable;
        public : __gc class WeaponRow;
        public : __gc class WeaponRowChangeEvent;
        
        private: Doomeroids::Weapons::WeaponDataTable *  tableWeapon;
        
        public: Weapons();
        protected: Weapons(System::Runtime::Serialization::SerializationInfo *  info, System::Runtime::Serialization::StreamingContext context);
        public: [property: System::ComponentModel::Browsable(false), 
        property: System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Content)]
         __property Doomeroids::Weapons::WeaponDataTable *  get_Weapon();
        
        public: virtual System::Data::DataSet *  Clone();
        
        protected: virtual System::Boolean ShouldSerializeTables();
        
        protected: virtual System::Boolean ShouldSerializeRelations();
        
        protected: virtual System::Void ReadXmlSerializable(System::Xml::XmlReader *  reader);
        
        protected: virtual System::Xml::Schema::XmlSchema *  GetSchemaSerializable();
        
        public private: System::Void InitVars();
        
        private: System::Void InitClass();
        
        private: System::Boolean ShouldSerializeWeapon();
        
        private: System::Void SchemaChanged(System::Object *  sender, System::ComponentModel::CollectionChangeEventArgs *  e);
        
        public: __delegate System::Void WeaponRowChangeEventHandler(System::Object *  sender, Doomeroids::Weapons::WeaponRowChangeEvent *  e);
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class WeaponDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn *  columnName;
            
            private: System::Data::DataColumn *  columnMaxRange;
            
            private: System::Data::DataColumn *  columnDamage;
            
            private: System::Data::DataColumn *  columnFireDelay;
            
            private: System::Data::DataColumn *  columnPlayerEquip;
            
            private: System::Data::DataColumn *  columnMonsterEquip;
            
            public private: WeaponDataTable();
            public private: WeaponDataTable(System::Data::DataTable *  table);
            public: [property: System::ComponentModel::Browsable(false)]
             __property System::Int32 get_Count();
            
            public private:  __property System::Data::DataColumn *  get_NameColumn();
            
            public private:  __property System::Data::DataColumn *  get_MaxRangeColumn();
            
            public private:  __property System::Data::DataColumn *  get_DamageColumn();
            
            public private:  __property System::Data::DataColumn *  get_FireDelayColumn();
            
            public private:  __property System::Data::DataColumn *  get_PlayerEquipColumn();
            
            public private:  __property System::Data::DataColumn *  get_MonsterEquipColumn();
            
            public:  __property Doomeroids::Weapons::WeaponRow *  get_Item(System::Int32 index);
            
            public: __event Doomeroids::Weapons::WeaponRowChangeEventHandler *  WeaponRowChanged;
            
            public: __event Doomeroids::Weapons::WeaponRowChangeEventHandler *  WeaponRowChanging;
            
            public: __event Doomeroids::Weapons::WeaponRowChangeEventHandler *  WeaponRowDeleted;
            
            public: __event Doomeroids::Weapons::WeaponRowChangeEventHandler *  WeaponRowDeleting;
            
            public: System::Void AddWeaponRow(Doomeroids::Weapons::WeaponRow *  row);
            
            public: Doomeroids::Weapons::WeaponRow *  AddWeaponRow(System::String *  Name, System::Int32 MaxRange, System::Int32 Damage, System::Single FireDelay, System::Boolean PlayerEquip, System::Boolean MonsterEquip);
            
            public: System::Collections::IEnumerator *  GetEnumerator();
            
            public: virtual System::Data::DataTable *  Clone();
            
            protected: virtual System::Data::DataTable *  CreateInstance();
            
            public private: System::Void InitVars();
            
            private: System::Void InitClass();
            
            public: Doomeroids::Weapons::WeaponRow *  NewWeaponRow();
            
            protected: virtual System::Data::DataRow *  NewRowFromBuilder(System::Data::DataRowBuilder *  builder);
            
            protected: virtual System::Type *  GetRowType();
            
            protected: virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs *  e);
            
            public: System::Void RemoveWeaponRow(Doomeroids::Weapons::WeaponRow *  row);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class WeaponRow : public System::Data::DataRow {
            
            private: Doomeroids::Weapons::WeaponDataTable *  tableWeapon;
            
            public private: WeaponRow(System::Data::DataRowBuilder *  rb);
            public:  __property System::String *  get_Name();
            public:  __property  void set_Name(System::String *  value);
            
            public:  __property System::Int32 get_MaxRange();
            public:  __property  void set_MaxRange(System::Int32 value);
            
            public:  __property System::Int32 get_Damage();
            public:  __property  void set_Damage(System::Int32 value);
            
            public:  __property System::Single get_FireDelay();
            public:  __property  void set_FireDelay(System::Single value);
            
            public:  __property System::Boolean get_PlayerEquip();
            public:  __property  void set_PlayerEquip(System::Boolean value);
            
            public:  __property System::Boolean get_MonsterEquip();
            public:  __property  void set_MonsterEquip(System::Boolean value);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class WeaponRowChangeEvent : public System::EventArgs {
            
            private: Doomeroids::Weapons::WeaponRow *  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: WeaponRowChangeEvent(Doomeroids::Weapons::WeaponRow *  row, System::Data::DataRowAction action);
            public:  __property Doomeroids::Weapons::WeaponRow *  get_Row();
            
            public:  __property System::Data::DataRowAction get_Action();
        };
        };
    
    
    
    inline Weapons::Weapons() {
        this->InitClass();
        System::ComponentModel::CollectionChangeEventHandler *  schemaChangedHandler = new System::ComponentModel::CollectionChangeEventHandler(this, SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline Weapons::Weapons(System::Runtime::Serialization::SerializationInfo *  info, System::Runtime::Serialization::StreamingContext context) {
        System::String *  strSchema = (__try_cast<System::String *  >(info->GetValue(S"XmlSchema", __typeof(System::String))));
        if ((strSchema != 0)) {
            System::Data::DataSet *  ds = new System::Data::DataSet();
            ds->ReadXmlSchema(new System::Xml::XmlTextReader(new System::IO::StringReader(strSchema)));
            if ((ds->Tables->Item[S"Weapon"] != 0)) {
                this->Tables->Add(new Doomeroids::Weapons::WeaponDataTable(ds->Tables->Item[S"Weapon"]));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->InitClass();
        }
        this->GetSerializationData(info, context);
        System::ComponentModel::CollectionChangeEventHandler *  schemaChangedHandler = new System::ComponentModel::CollectionChangeEventHandler(this, SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline Doomeroids::Weapons::WeaponDataTable *  Weapons::get_Weapon() {
        return this->tableWeapon;
    }
    
    inline System::Data::DataSet *  Weapons::Clone() {
        Doomeroids::Weapons *  cln = (__try_cast<Doomeroids::Weapons *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Boolean Weapons::ShouldSerializeTables() {
        return false;
    };
    
    inline System::Boolean Weapons::ShouldSerializeRelations() {
        return false;
    };
    
    inline System::Void Weapons::ReadXmlSerializable(System::Xml::XmlReader *  reader) {
        this->Reset();
        System::Data::DataSet *  ds = new System::Data::DataSet();
        ds->ReadXml(reader);
        if ((ds->Tables->Item[S"Weapon"] != 0)) {
            this->Tables->Add(new Doomeroids::Weapons::WeaponDataTable(ds->Tables->Item[S"Weapon"]));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, System::Data::MissingSchemaAction::Add);
        this->InitVars();
    };
    
    inline System::Xml::Schema::XmlSchema *  Weapons::GetSchemaSerializable() {
        System::IO::MemoryStream *  stream = new System::IO::MemoryStream();
        this->WriteXmlSchema(new System::Xml::XmlTextWriter(stream, 0));
        stream->Position = 0;
        return System::Xml::Schema::XmlSchema::Read(new System::Xml::XmlTextReader(stream), 0);
    };
    
    inline System::Void Weapons::InitVars() {
        this->tableWeapon = (__try_cast<Doomeroids::Weapons::WeaponDataTable *  >(this->Tables->Item[S"Weapon"]));
        if ((this->tableWeapon != 0)) {
            this->tableWeapon->InitVars();
        }
    };
    
    inline System::Void Weapons::InitClass() {
        this->DataSetName = S"Weapons";
        this->Prefix = S"";
        this->Namespace = S"http://tempuri.org/Weapons.xsd";
        this->Locale = new System::Globalization::CultureInfo(S"en-US");
        this->CaseSensitive = false;
        this->EnforceConstraints = false;
        this->tableWeapon = new Doomeroids::Weapons::WeaponDataTable();
        this->Tables->Add(this->tableWeapon);
    };
    
    inline System::Boolean Weapons::ShouldSerializeWeapon() {
        return false;
    };
    
    inline System::Void Weapons::SchemaChanged(System::Object *  sender, System::ComponentModel::CollectionChangeEventArgs *  e) {
        if ((e->Action == System::ComponentModel::CollectionChangeAction::Remove)) {
            this->InitVars();
        }
    };
    
    
    
    
    
    
    
    
    
    inline Weapons::WeaponDataTable::WeaponDataTable() : 
            DataTable(S"Weapon") {
        this->InitClass();
    }
    
    inline Weapons::WeaponDataTable::WeaponDataTable(System::Data::DataTable *  table) : 
            DataTable(table->TableName) {
        if ((table->CaseSensitive != table->DataSet->CaseSensitive)) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if ((table->Locale->ToString() != table->DataSet->Locale->ToString())) {
            this->Locale = table->Locale;
        }
        if ((table->Namespace != table->DataSet->Namespace)) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
        this->DisplayExpression = table->DisplayExpression;
    }
    
    inline System::Int32 Weapons::WeaponDataTable::get_Count() {
        return this->Rows->Count;
    }
    
    inline System::Data::DataColumn *  Weapons::WeaponDataTable::get_NameColumn() {
        return this->columnName;
    }
    
    inline System::Data::DataColumn *  Weapons::WeaponDataTable::get_MaxRangeColumn() {
        return this->columnMaxRange;
    }
    
    inline System::Data::DataColumn *  Weapons::WeaponDataTable::get_DamageColumn() {
        return this->columnDamage;
    }
    
    inline System::Data::DataColumn *  Weapons::WeaponDataTable::get_FireDelayColumn() {
        return this->columnFireDelay;
    }
    
    inline System::Data::DataColumn *  Weapons::WeaponDataTable::get_PlayerEquipColumn() {
        return this->columnPlayerEquip;
    }
    
    inline System::Data::DataColumn *  Weapons::WeaponDataTable::get_MonsterEquipColumn() {
        return this->columnMonsterEquip;
    }
    
    inline Doomeroids::Weapons::WeaponRow *  Weapons::WeaponDataTable::get_Item(System::Int32 index) {
        return (__try_cast<Doomeroids::Weapons::WeaponRow *  >(this->Rows->Item[index]));
    }
    
    
    
    
    
    inline System::Void Weapons::WeaponDataTable::AddWeaponRow(Doomeroids::Weapons::WeaponRow *  row) {
        this->Rows->Add(row);
    };
    
    inline Doomeroids::Weapons::WeaponRow *  Weapons::WeaponDataTable::AddWeaponRow(System::String *  Name, System::Int32 MaxRange, System::Int32 Damage, System::Single FireDelay, System::Boolean PlayerEquip, System::Boolean MonsterEquip) {
        Doomeroids::Weapons::WeaponRow *  rowWeaponRow = (__try_cast<Doomeroids::Weapons::WeaponRow *  >(this->NewRow()));
        System::Object* __mcTemp__1[] = new System::Object*[6];
                __mcTemp__1[0] = Name;
                __mcTemp__1[1] = __box(MaxRange);
                __mcTemp__1[2] = __box(Damage);
                __mcTemp__1[3] = __box(FireDelay);
                __mcTemp__1[4] = __box(PlayerEquip);
                __mcTemp__1[5] = __box(MonsterEquip);
        rowWeaponRow->ItemArray = __mcTemp__1;
        this->Rows->Add(rowWeaponRow);
        return rowWeaponRow;
    };
    
    inline System::Collections::IEnumerator *  Weapons::WeaponDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    };
    
    inline System::Data::DataTable *  Weapons::WeaponDataTable::Clone() {
        Doomeroids::Weapons::WeaponDataTable *  cln = (__try_cast<Doomeroids::Weapons::WeaponDataTable *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Data::DataTable *  Weapons::WeaponDataTable::CreateInstance() {
        return new Doomeroids::Weapons::WeaponDataTable();
    };
    
    inline System::Void Weapons::WeaponDataTable::InitVars() {
        this->columnName = this->Columns->Item[S"Name"];
        this->columnMaxRange = this->Columns->Item[S"MaxRange"];
        this->columnDamage = this->Columns->Item[S"Damage"];
        this->columnFireDelay = this->Columns->Item[S"FireDelay"];
        this->columnPlayerEquip = this->Columns->Item[S"PlayerEquip"];
        this->columnMonsterEquip = this->Columns->Item[S"MonsterEquip"];
    };
    
    inline System::Void Weapons::WeaponDataTable::InitClass() {
        this->columnName = new System::Data::DataColumn(S"Name", __typeof(System::String), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columnName);
        this->columnMaxRange = new System::Data::DataColumn(S"MaxRange", __typeof(System::Int32), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columnMaxRange);
        this->columnDamage = new System::Data::DataColumn(S"Damage", __typeof(System::Int32), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columnDamage);
        this->columnFireDelay = new System::Data::DataColumn(S"FireDelay", __typeof(System::Single), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columnFireDelay);
        this->columnPlayerEquip = new System::Data::DataColumn(S"PlayerEquip", __typeof(System::Boolean), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columnPlayerEquip);
        this->columnMonsterEquip = new System::Data::DataColumn(S"MonsterEquip", __typeof(System::Boolean), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columnMonsterEquip);
        this->columnName->AllowDBNull = false;
        this->columnMaxRange->AllowDBNull = false;
        this->columnDamage->AllowDBNull = false;
        this->columnFireDelay->AllowDBNull = false;
        this->columnPlayerEquip->AllowDBNull = false;
        this->columnMonsterEquip->AllowDBNull = false;
    };
    
    inline Doomeroids::Weapons::WeaponRow *  Weapons::WeaponDataTable::NewWeaponRow() {
        return (__try_cast<Doomeroids::Weapons::WeaponRow *  >(this->NewRow()));
    };
    
    inline System::Data::DataRow *  Weapons::WeaponDataTable::NewRowFromBuilder(System::Data::DataRowBuilder *  builder) {
        return new Doomeroids::Weapons::WeaponRow(builder);
    };
    
    inline System::Type *  Weapons::WeaponDataTable::GetRowType() {
        return __typeof(Doomeroids::Weapons::WeaponRow);
    };
    
    inline System::Void Weapons::WeaponDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanged(e);
        if ((this->WeaponRowChanged != 0)) {
            this->WeaponRowChanged(this, new Doomeroids::Weapons::WeaponRowChangeEvent((__try_cast<Doomeroids::Weapons::WeaponRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void Weapons::WeaponDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanging(e);
        if ((this->WeaponRowChanging != 0)) {
            this->WeaponRowChanging(this, new Doomeroids::Weapons::WeaponRowChangeEvent((__try_cast<Doomeroids::Weapons::WeaponRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void Weapons::WeaponDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleted(e);
        if ((this->WeaponRowDeleted != 0)) {
            this->WeaponRowDeleted(this, new Doomeroids::Weapons::WeaponRowChangeEvent((__try_cast<Doomeroids::Weapons::WeaponRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void Weapons::WeaponDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleting(e);
        if ((this->WeaponRowDeleting != 0)) {
            this->WeaponRowDeleting(this, new Doomeroids::Weapons::WeaponRowChangeEvent((__try_cast<Doomeroids::Weapons::WeaponRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void Weapons::WeaponDataTable::RemoveWeaponRow(Doomeroids::Weapons::WeaponRow *  row) {
        this->Rows->Remove(row);
    };
    
    
    
    inline Weapons::WeaponRow::WeaponRow(System::Data::DataRowBuilder *  rb) : 
            DataRow(rb) {
        this->tableWeapon = (__try_cast<Doomeroids::Weapons::WeaponDataTable *  >(this->Table));
    }
    
    inline System::String *  Weapons::WeaponRow::get_Name() {
        return (__try_cast<System::String *  >(this->Item[this->tableWeapon->NameColumn]));
    }
    inline void Weapons::WeaponRow::set_Name(System::String *  value) {
        this->Item[this->tableWeapon->NameColumn] = value;
    }
    
    inline System::Int32 Weapons::WeaponRow::get_MaxRange() {
        return (*__try_cast<__box System::Int32 *  >(this->Item[this->tableWeapon->MaxRangeColumn]));
    }
    inline void Weapons::WeaponRow::set_MaxRange(System::Int32 value) {
        this->Item[this->tableWeapon->MaxRangeColumn] = __box(value);
    }
    
    inline System::Int32 Weapons::WeaponRow::get_Damage() {
        return (*__try_cast<__box System::Int32 *  >(this->Item[this->tableWeapon->DamageColumn]));
    }
    inline void Weapons::WeaponRow::set_Damage(System::Int32 value) {
        this->Item[this->tableWeapon->DamageColumn] = __box(value);
    }
    
    inline System::Single Weapons::WeaponRow::get_FireDelay() {
        return (*__try_cast<__box System::Single *  >(this->Item[this->tableWeapon->FireDelayColumn]));
    }
    inline void Weapons::WeaponRow::set_FireDelay(System::Single value) {
        this->Item[this->tableWeapon->FireDelayColumn] = __box(value);
    }
    
    inline System::Boolean Weapons::WeaponRow::get_PlayerEquip() {
        return (*__try_cast<__box System::Boolean *  >(this->Item[this->tableWeapon->PlayerEquipColumn]));
    }
    inline void Weapons::WeaponRow::set_PlayerEquip(System::Boolean value) {
        this->Item[this->tableWeapon->PlayerEquipColumn] = __box(value);
    }
    
    inline System::Boolean Weapons::WeaponRow::get_MonsterEquip() {
        return (*__try_cast<__box System::Boolean *  >(this->Item[this->tableWeapon->MonsterEquipColumn]));
    }
    inline void Weapons::WeaponRow::set_MonsterEquip(System::Boolean value) {
        this->Item[this->tableWeapon->MonsterEquipColumn] = __box(value);
    }
    
    
    
    
    inline Weapons::WeaponRowChangeEvent::WeaponRowChangeEvent(Doomeroids::Weapons::WeaponRow *  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline Doomeroids::Weapons::WeaponRow *  Weapons::WeaponRowChangeEvent::get_Row() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction Weapons::WeaponRowChangeEvent::get_Action() {
        return this->eventAction;
    }
}

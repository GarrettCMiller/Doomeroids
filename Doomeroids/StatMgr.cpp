///////////////////////////////////////////////////////////////////////////
//		File:				StatMgr.cpp
//
//		Programmer:			Garrett Miller (GM) (c) 2004
//
//		Date created:		N/A
//
//		Description:		A manager that can handle most any statistic
//							record keeping given to it.
//////////////////////////////////////////////////////////////////////////
#include "StdAfx.h"
#include "StatMgr.h"

//#include "Globals.h"

//////////////////////////////////////////////////////////////////////////

IMPLEMENT_SINGLETON(StatMgr);

//////////////////////////////////////////////////////////////////////////

StatMgr::StatMgr(void)
{
}

//////////////////////////////////////////////////////////////////////////

StatMgr::~StatMgr(void)
{
	if (!Shutdown())
	{
		g_Log.LOG_ERROR("Couldn't shut down StatMgr!\n");
	}
}

//////////////////////////////////////////////////////////////////////////

Int32 StatMgr::Init()
{
	return 1;
}

//////////////////////////////////////////////////////////////////////////

Int32 StatMgr::Update()
{
	return 1;
}

//////////////////////////////////////////////////////////////////////////

Int32 StatMgr::Shutdown()
{
	return 1;
}

//////////////////////////////////////////////////////////////////////////

Statistic& StatMgr::GetStat(String  name)
{
	DblLinkedList<Statistic>::Iterator it(m_Stats);

	for (it.Begin(); !it.End(); ++it)
	{
		if (!strcmp(name.c_str(), it.Current().GetName().c_str()))
			return it.Current();
	}

	return it.Current();
}

//////////////////////////////////////////////////////////////////////////

Statistic& StatMgr::GetStat(UInt32 index)
{
	return m_Stats[index];
}

//////////////////////////////////////////////////////////////////////////

void StatMgr::CreateStat(String  name)
{
	ASSERT(!name.empty());

	Statistic stat = Statistic(name);

	m_Stats.Add(stat);
}

//////////////////////////////////////////////////////////////////////////
#pragma once 

#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>
#using <mscorlib.dll>

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 
namespace Doomeroids {
    using namespace System;
    using namespace System::Data;
    using namespace System::Xml;
    using namespace System::Runtime::Serialization;
    
    using namespace System;
    public __gc class CreatureDescriptions;
    
    
    [Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(S"code"), 
    System::Diagnostics::DebuggerStepThrough, 
    System::ComponentModel::ToolboxItem(true)]
    public __gc class CreatureDescriptions : public System::Data::DataSet {
        public : __gc class CreatureDataTable;
        public : __gc class CreatureRow;
        public : __gc class CreatureRowChangeEvent;
        public : __gc class FootPosDataTable;
        public : __gc class FootPosRow;
        public : __gc class FootPosRowChangeEvent;
        public : __gc class BBoxDataTable;
        public : __gc class BBoxRow;
        public : __gc class BBoxRowChangeEvent;
        public : __gc class WeaponDataTable;
        public : __gc class WeaponRow;
        public : __gc class WeaponRowChangeEvent;
        
        private: Doomeroids::CreatureDescriptions::CreatureDataTable *  tableCreature;
        
        private: Doomeroids::CreatureDescriptions::FootPosDataTable *  tableFootPos;
        
        private: Doomeroids::CreatureDescriptions::BBoxDataTable *  tableBBox;
        
        private: Doomeroids::CreatureDescriptions::WeaponDataTable *  tableWeapon;
        
        private: System::Data::DataRelation *  relationCreature_FootPos;
        
        private: System::Data::DataRelation *  relationCreature_BBox;
        
        private: System::Data::DataRelation *  relationCreature_Weapon;
        
        public: CreatureDescriptions();
        protected: CreatureDescriptions(System::Runtime::Serialization::SerializationInfo *  info, System::Runtime::Serialization::StreamingContext context);
        public: [property: System::ComponentModel::Browsable(false), 
        property: System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Content)]
         __property Doomeroids::CreatureDescriptions::CreatureDataTable *  get_Creature();
        
        public: [property: System::ComponentModel::Browsable(false), 
        property: System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Content)]
         __property Doomeroids::CreatureDescriptions::FootPosDataTable *  get_FootPos();
        
        public: [property: System::ComponentModel::Browsable(false), 
        property: System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Content)]
         __property Doomeroids::CreatureDescriptions::BBoxDataTable *  get_BBox();
        
        public: [property: System::ComponentModel::Browsable(false), 
        property: System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Content)]
         __property Doomeroids::CreatureDescriptions::WeaponDataTable *  get_Weapon();
        
        public: virtual System::Data::DataSet *  Clone();
        
        protected: virtual System::Boolean ShouldSerializeTables();
        
        protected: virtual System::Boolean ShouldSerializeRelations();
        
        protected: virtual System::Void ReadXmlSerializable(System::Xml::XmlReader *  reader);
        
        protected: virtual System::Xml::Schema::XmlSchema *  GetSchemaSerializable();
        
        public private: System::Void InitVars();
        
        private: System::Void InitClass();
        
        private: System::Boolean ShouldSerializeCreature();
        
        private: System::Boolean ShouldSerializeFootPos();
        
        private: System::Boolean ShouldSerializeBBox();
        
        private: System::Boolean ShouldSerializeWeapon();
        
        private: System::Void SchemaChanged(System::Object *  sender, System::ComponentModel::CollectionChangeEventArgs *  e);
        
        public: __delegate System::Void CreatureRowChangeEventHandler(System::Object *  sender, Doomeroids::CreatureDescriptions::CreatureRowChangeEvent *  e);
        
        public: __delegate System::Void FootPosRowChangeEventHandler(System::Object *  sender, Doomeroids::CreatureDescriptions::FootPosRowChangeEvent *  e);
        
        public: __delegate System::Void BBoxRowChangeEventHandler(System::Object *  sender, Doomeroids::CreatureDescriptions::BBoxRowChangeEvent *  e);
        
        public: __delegate System::Void WeaponRowChangeEventHandler(System::Object *  sender, Doomeroids::CreatureDescriptions::WeaponRowChangeEvent *  e);
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class CreatureDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn *  columntype;
            
            private: System::Data::DataColumn *  columnName;
            
            private: System::Data::DataColumn *  columnHP;
            
            private: System::Data::DataColumn *  columnCreature_Id;
            
            public private: CreatureDataTable();
            public private: CreatureDataTable(System::Data::DataTable *  table);
            public: [property: System::ComponentModel::Browsable(false)]
             __property System::Int32 get_Count();
            
            public private:  __property System::Data::DataColumn *  get_typeColumn();
            
            public private:  __property System::Data::DataColumn *  get_NameColumn();
            
            public private:  __property System::Data::DataColumn *  get_HPColumn();
            
            public private:  __property System::Data::DataColumn *  get_Creature_IdColumn();
            
            public:  __property Doomeroids::CreatureDescriptions::CreatureRow *  get_Item(System::Int32 index);
            
            public: __event Doomeroids::CreatureDescriptions::CreatureRowChangeEventHandler *  CreatureRowChanged;
            
            public: __event Doomeroids::CreatureDescriptions::CreatureRowChangeEventHandler *  CreatureRowChanging;
            
            public: __event Doomeroids::CreatureDescriptions::CreatureRowChangeEventHandler *  CreatureRowDeleted;
            
            public: __event Doomeroids::CreatureDescriptions::CreatureRowChangeEventHandler *  CreatureRowDeleting;
            
            public: System::Void AddCreatureRow(Doomeroids::CreatureDescriptions::CreatureRow *  row);
            
            public: Doomeroids::CreatureDescriptions::CreatureRow *  AddCreatureRow(System::String *  type, System::String *  Name, System::Int32 HP);
            
            public: System::Collections::IEnumerator *  GetEnumerator();
            
            public: virtual System::Data::DataTable *  Clone();
            
            protected: virtual System::Data::DataTable *  CreateInstance();
            
            public private: System::Void InitVars();
            
            private: System::Void InitClass();
            
            public: Doomeroids::CreatureDescriptions::CreatureRow *  NewCreatureRow();
            
            protected: virtual System::Data::DataRow *  NewRowFromBuilder(System::Data::DataRowBuilder *  builder);
            
            protected: virtual System::Type *  GetRowType();
            
            protected: virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs *  e);
            
            public: System::Void RemoveCreatureRow(Doomeroids::CreatureDescriptions::CreatureRow *  row);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class CreatureRow : public System::Data::DataRow {
            
            private: Doomeroids::CreatureDescriptions::CreatureDataTable *  tableCreature;
            
            public private: CreatureRow(System::Data::DataRowBuilder *  rb);
            public:  __property System::String *  get_type();
            public:  __property  void set_type(System::String *  value);
            
            public:  __property System::String *  get_Name();
            public:  __property  void set_Name(System::String *  value);
            
            public:  __property System::Int32 get_HP();
            public:  __property  void set_HP(System::Int32 value);
            
            public: System::Boolean IstypeNull();
            
            public: System::Void SettypeNull();
            
            public: Doomeroids::CreatureDescriptions::FootPosRow *  GetFootPosRows()[];
            
            public: Doomeroids::CreatureDescriptions::BBoxRow *  GetBBoxRows()[];
            
            public: Doomeroids::CreatureDescriptions::WeaponRow *  GetWeaponRows()[];
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class CreatureRowChangeEvent : public System::EventArgs {
            
            private: Doomeroids::CreatureDescriptions::CreatureRow *  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: CreatureRowChangeEvent(Doomeroids::CreatureDescriptions::CreatureRow *  row, System::Data::DataRowAction action);
            public:  __property Doomeroids::CreatureDescriptions::CreatureRow *  get_Row();
            
            public:  __property System::Data::DataRowAction get_Action();
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class FootPosDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn *  columnx;
            
            private: System::Data::DataColumn *  columny;
            
            private: System::Data::DataColumn *  columnCreature_Id;
            
            public private: FootPosDataTable();
            public private: FootPosDataTable(System::Data::DataTable *  table);
            public: [property: System::ComponentModel::Browsable(false)]
             __property System::Int32 get_Count();
            
            public private:  __property System::Data::DataColumn *  get_xColumn();
            
            public private:  __property System::Data::DataColumn *  get_yColumn();
            
            public private:  __property System::Data::DataColumn *  get_Creature_IdColumn();
            
            public:  __property Doomeroids::CreatureDescriptions::FootPosRow *  get_Item(System::Int32 index);
            
            public: __event Doomeroids::CreatureDescriptions::FootPosRowChangeEventHandler *  FootPosRowChanged;
            
            public: __event Doomeroids::CreatureDescriptions::FootPosRowChangeEventHandler *  FootPosRowChanging;
            
            public: __event Doomeroids::CreatureDescriptions::FootPosRowChangeEventHandler *  FootPosRowDeleted;
            
            public: __event Doomeroids::CreatureDescriptions::FootPosRowChangeEventHandler *  FootPosRowDeleting;
            
            public: System::Void AddFootPosRow(Doomeroids::CreatureDescriptions::FootPosRow *  row);
            
            public: Doomeroids::CreatureDescriptions::FootPosRow *  AddFootPosRow(System::Int32 x, System::Int32 y, Doomeroids::CreatureDescriptions::CreatureRow *  parentCreatureRowByCreature_FootPos);
            
            public: System::Collections::IEnumerator *  GetEnumerator();
            
            public: virtual System::Data::DataTable *  Clone();
            
            protected: virtual System::Data::DataTable *  CreateInstance();
            
            public private: System::Void InitVars();
            
            private: System::Void InitClass();
            
            public: Doomeroids::CreatureDescriptions::FootPosRow *  NewFootPosRow();
            
            protected: virtual System::Data::DataRow *  NewRowFromBuilder(System::Data::DataRowBuilder *  builder);
            
            protected: virtual System::Type *  GetRowType();
            
            protected: virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs *  e);
            
            public: System::Void RemoveFootPosRow(Doomeroids::CreatureDescriptions::FootPosRow *  row);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class FootPosRow : public System::Data::DataRow {
            
            private: Doomeroids::CreatureDescriptions::FootPosDataTable *  tableFootPos;
            
            public private: FootPosRow(System::Data::DataRowBuilder *  rb);
            public:  __property System::Int32 get_x();
            public:  __property  void set_x(System::Int32 value);
            
            public:  __property System::Int32 get_y();
            public:  __property  void set_y(System::Int32 value);
            
            public:  __property Doomeroids::CreatureDescriptions::CreatureRow *  get_CreatureRow();
            public:  __property  void set_CreatureRow(Doomeroids::CreatureDescriptions::CreatureRow *  value);
            
            public: System::Boolean IsxNull();
            
            public: System::Void SetxNull();
            
            public: System::Boolean IsyNull();
            
            public: System::Void SetyNull();
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class FootPosRowChangeEvent : public System::EventArgs {
            
            private: Doomeroids::CreatureDescriptions::FootPosRow *  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: FootPosRowChangeEvent(Doomeroids::CreatureDescriptions::FootPosRow *  row, System::Data::DataRowAction action);
            public:  __property Doomeroids::CreatureDescriptions::FootPosRow *  get_Row();
            
            public:  __property System::Data::DataRowAction get_Action();
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class BBoxDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn *  columnx;
            
            private: System::Data::DataColumn *  columny;
            
            private: System::Data::DataColumn *  columnCreature_Id;
            
            public private: BBoxDataTable();
            public private: BBoxDataTable(System::Data::DataTable *  table);
            public: [property: System::ComponentModel::Browsable(false)]
             __property System::Int32 get_Count();
            
            public private:  __property System::Data::DataColumn *  get_xColumn();
            
            public private:  __property System::Data::DataColumn *  get_yColumn();
            
            public private:  __property System::Data::DataColumn *  get_Creature_IdColumn();
            
            public:  __property Doomeroids::CreatureDescriptions::BBoxRow *  get_Item(System::Int32 index);
            
            public: __event Doomeroids::CreatureDescriptions::BBoxRowChangeEventHandler *  BBoxRowChanged;
            
            public: __event Doomeroids::CreatureDescriptions::BBoxRowChangeEventHandler *  BBoxRowChanging;
            
            public: __event Doomeroids::CreatureDescriptions::BBoxRowChangeEventHandler *  BBoxRowDeleted;
            
            public: __event Doomeroids::CreatureDescriptions::BBoxRowChangeEventHandler *  BBoxRowDeleting;
            
            public: System::Void AddBBoxRow(Doomeroids::CreatureDescriptions::BBoxRow *  row);
            
            public: Doomeroids::CreatureDescriptions::BBoxRow *  AddBBoxRow(System::Int32 x, System::Int32 y, Doomeroids::CreatureDescriptions::CreatureRow *  parentCreatureRowByCreature_BBox);
            
            public: System::Collections::IEnumerator *  GetEnumerator();
            
            public: virtual System::Data::DataTable *  Clone();
            
            protected: virtual System::Data::DataTable *  CreateInstance();
            
            public private: System::Void InitVars();
            
            private: System::Void InitClass();
            
            public: Doomeroids::CreatureDescriptions::BBoxRow *  NewBBoxRow();
            
            protected: virtual System::Data::DataRow *  NewRowFromBuilder(System::Data::DataRowBuilder *  builder);
            
            protected: virtual System::Type *  GetRowType();
            
            protected: virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs *  e);
            
            public: System::Void RemoveBBoxRow(Doomeroids::CreatureDescriptions::BBoxRow *  row);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class BBoxRow : public System::Data::DataRow {
            
            private: Doomeroids::CreatureDescriptions::BBoxDataTable *  tableBBox;
            
            public private: BBoxRow(System::Data::DataRowBuilder *  rb);
            public:  __property System::Int32 get_x();
            public:  __property  void set_x(System::Int32 value);
            
            public:  __property System::Int32 get_y();
            public:  __property  void set_y(System::Int32 value);
            
            public:  __property Doomeroids::CreatureDescriptions::CreatureRow *  get_CreatureRow();
            public:  __property  void set_CreatureRow(Doomeroids::CreatureDescriptions::CreatureRow *  value);
            
            public: System::Boolean IsxNull();
            
            public: System::Void SetxNull();
            
            public: System::Boolean IsyNull();
            
            public: System::Void SetyNull();
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class BBoxRowChangeEvent : public System::EventArgs {
            
            private: Doomeroids::CreatureDescriptions::BBoxRow *  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: BBoxRowChangeEvent(Doomeroids::CreatureDescriptions::BBoxRow *  row, System::Data::DataRowAction action);
            public:  __property Doomeroids::CreatureDescriptions::BBoxRow *  get_Row();
            
            public:  __property System::Data::DataRowAction get_Action();
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class WeaponDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn *  columnWeapon_Text;
            
            private: System::Data::DataColumn *  columnCreature_Id;
            
            public private: WeaponDataTable();
            public private: WeaponDataTable(System::Data::DataTable *  table);
            public: [property: System::ComponentModel::Browsable(false)]
             __property System::Int32 get_Count();
            
            public private:  __property System::Data::DataColumn *  get_Weapon_TextColumn();
            
            public private:  __property System::Data::DataColumn *  get_Creature_IdColumn();
            
            public:  __property Doomeroids::CreatureDescriptions::WeaponRow *  get_Item(System::Int32 index);
            
            public: __event Doomeroids::CreatureDescriptions::WeaponRowChangeEventHandler *  WeaponRowChanged;
            
            public: __event Doomeroids::CreatureDescriptions::WeaponRowChangeEventHandler *  WeaponRowChanging;
            
            public: __event Doomeroids::CreatureDescriptions::WeaponRowChangeEventHandler *  WeaponRowDeleted;
            
            public: __event Doomeroids::CreatureDescriptions::WeaponRowChangeEventHandler *  WeaponRowDeleting;
            
            public: System::Void AddWeaponRow(Doomeroids::CreatureDescriptions::WeaponRow *  row);
            
            public: Doomeroids::CreatureDescriptions::WeaponRow *  AddWeaponRow(System::String *  Weapon_Text, Doomeroids::CreatureDescriptions::CreatureRow *  parentCreatureRowByCreature_Weapon);
            
            public: System::Collections::IEnumerator *  GetEnumerator();
            
            public: virtual System::Data::DataTable *  Clone();
            
            protected: virtual System::Data::DataTable *  CreateInstance();
            
            public private: System::Void InitVars();
            
            private: System::Void InitClass();
            
            public: Doomeroids::CreatureDescriptions::WeaponRow *  NewWeaponRow();
            
            protected: virtual System::Data::DataRow *  NewRowFromBuilder(System::Data::DataRowBuilder *  builder);
            
            protected: virtual System::Type *  GetRowType();
            
            protected: virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs *  e);
            
            public: System::Void RemoveWeaponRow(Doomeroids::CreatureDescriptions::WeaponRow *  row);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class WeaponRow : public System::Data::DataRow {
            
            private: Doomeroids::CreatureDescriptions::WeaponDataTable *  tableWeapon;
            
            public private: WeaponRow(System::Data::DataRowBuilder *  rb);
            public:  __property System::String *  get_Weapon_Text();
            public:  __property  void set_Weapon_Text(System::String *  value);
            
            public:  __property Doomeroids::CreatureDescriptions::CreatureRow *  get_CreatureRow();
            public:  __property  void set_CreatureRow(Doomeroids::CreatureDescriptions::CreatureRow *  value);
            
            public: System::Boolean IsWeapon_TextNull();
            
            public: System::Void SetWeapon_TextNull();
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class WeaponRowChangeEvent : public System::EventArgs {
            
            private: Doomeroids::CreatureDescriptions::WeaponRow *  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: WeaponRowChangeEvent(Doomeroids::CreatureDescriptions::WeaponRow *  row, System::Data::DataRowAction action);
            public:  __property Doomeroids::CreatureDescriptions::WeaponRow *  get_Row();
            
            public:  __property System::Data::DataRowAction get_Action();
        };
        };
    
    
    
    
    
    
    
    
    
    inline CreatureDescriptions::CreatureDescriptions() {
        this->InitClass();
        System::ComponentModel::CollectionChangeEventHandler *  schemaChangedHandler = new System::ComponentModel::CollectionChangeEventHandler(this, SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline CreatureDescriptions::CreatureDescriptions(System::Runtime::Serialization::SerializationInfo *  info, System::Runtime::Serialization::StreamingContext context) {
        System::String *  strSchema = (__try_cast<System::String *  >(info->GetValue(S"XmlSchema", __typeof(System::String))));
        if ((strSchema != 0)) {
            System::Data::DataSet *  ds = new System::Data::DataSet();
            ds->ReadXmlSchema(new System::Xml::XmlTextReader(new System::IO::StringReader(strSchema)));
            if ((ds->Tables->Item[S"Creature"] != 0)) {
                this->Tables->Add(new Doomeroids::CreatureDescriptions::CreatureDataTable(ds->Tables->Item[S"Creature"]));
            }
            if ((ds->Tables->Item[S"FootPos"] != 0)) {
                this->Tables->Add(new Doomeroids::CreatureDescriptions::FootPosDataTable(ds->Tables->Item[S"FootPos"]));
            }
            if ((ds->Tables->Item[S"BBox"] != 0)) {
                this->Tables->Add(new Doomeroids::CreatureDescriptions::BBoxDataTable(ds->Tables->Item[S"BBox"]));
            }
            if ((ds->Tables->Item[S"Weapon"] != 0)) {
                this->Tables->Add(new Doomeroids::CreatureDescriptions::WeaponDataTable(ds->Tables->Item[S"Weapon"]));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->InitClass();
        }
        this->GetSerializationData(info, context);
        System::ComponentModel::CollectionChangeEventHandler *  schemaChangedHandler = new System::ComponentModel::CollectionChangeEventHandler(this, SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline Doomeroids::CreatureDescriptions::CreatureDataTable *  CreatureDescriptions::get_Creature() {
        return this->tableCreature;
    }
    
    inline Doomeroids::CreatureDescriptions::FootPosDataTable *  CreatureDescriptions::get_FootPos() {
        return this->tableFootPos;
    }
    
    inline Doomeroids::CreatureDescriptions::BBoxDataTable *  CreatureDescriptions::get_BBox() {
        return this->tableBBox;
    }
    
    inline Doomeroids::CreatureDescriptions::WeaponDataTable *  CreatureDescriptions::get_Weapon() {
        return this->tableWeapon;
    }
    
    inline System::Data::DataSet *  CreatureDescriptions::Clone() {
        Doomeroids::CreatureDescriptions *  cln = (__try_cast<Doomeroids::CreatureDescriptions *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Boolean CreatureDescriptions::ShouldSerializeTables() {
        return false;
    };
    
    inline System::Boolean CreatureDescriptions::ShouldSerializeRelations() {
        return false;
    };
    
    inline System::Void CreatureDescriptions::ReadXmlSerializable(System::Xml::XmlReader *  reader) {
        this->Reset();
        System::Data::DataSet *  ds = new System::Data::DataSet();
        ds->ReadXml(reader);
        if ((ds->Tables->Item[S"Creature"] != 0)) {
            this->Tables->Add(new Doomeroids::CreatureDescriptions::CreatureDataTable(ds->Tables->Item[S"Creature"]));
        }
        if ((ds->Tables->Item[S"FootPos"] != 0)) {
            this->Tables->Add(new Doomeroids::CreatureDescriptions::FootPosDataTable(ds->Tables->Item[S"FootPos"]));
        }
        if ((ds->Tables->Item[S"BBox"] != 0)) {
            this->Tables->Add(new Doomeroids::CreatureDescriptions::BBoxDataTable(ds->Tables->Item[S"BBox"]));
        }
        if ((ds->Tables->Item[S"Weapon"] != 0)) {
            this->Tables->Add(new Doomeroids::CreatureDescriptions::WeaponDataTable(ds->Tables->Item[S"Weapon"]));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, System::Data::MissingSchemaAction::Add);
        this->InitVars();
    };
    
    inline System::Xml::Schema::XmlSchema *  CreatureDescriptions::GetSchemaSerializable() {
        System::IO::MemoryStream *  stream = new System::IO::MemoryStream();
        this->WriteXmlSchema(new System::Xml::XmlTextWriter(stream, 0));
        stream->Position = 0;
        return System::Xml::Schema::XmlSchema::Read(new System::Xml::XmlTextReader(stream), 0);
    };
    
    inline System::Void CreatureDescriptions::InitVars() {
        this->tableCreature = (__try_cast<Doomeroids::CreatureDescriptions::CreatureDataTable *  >(this->Tables->Item[S"Creature"]));
        if ((this->tableCreature != 0)) {
            this->tableCreature->InitVars();
        }
        this->tableFootPos = (__try_cast<Doomeroids::CreatureDescriptions::FootPosDataTable *  >(this->Tables->Item[S"FootPos"]));
        if ((this->tableFootPos != 0)) {
            this->tableFootPos->InitVars();
        }
        this->tableBBox = (__try_cast<Doomeroids::CreatureDescriptions::BBoxDataTable *  >(this->Tables->Item[S"BBox"]));
        if ((this->tableBBox != 0)) {
            this->tableBBox->InitVars();
        }
        this->tableWeapon = (__try_cast<Doomeroids::CreatureDescriptions::WeaponDataTable *  >(this->Tables->Item[S"Weapon"]));
        if ((this->tableWeapon != 0)) {
            this->tableWeapon->InitVars();
        }
        this->relationCreature_FootPos = this->Relations->Item[S"Creature_FootPos"];
        this->relationCreature_BBox = this->Relations->Item[S"Creature_BBox"];
        this->relationCreature_Weapon = this->Relations->Item[S"Creature_Weapon"];
    };
    
    inline System::Void CreatureDescriptions::InitClass() {
        this->DataSetName = S"CreatureDescriptions";
        this->Prefix = S"";
        this->Namespace = S"http://tempuri.org/EnemyDesc.xsd";
        this->Locale = new System::Globalization::CultureInfo(S"en-US");
        this->CaseSensitive = false;
        this->EnforceConstraints = true;
        this->tableCreature = new Doomeroids::CreatureDescriptions::CreatureDataTable();
        this->Tables->Add(this->tableCreature);
        this->tableFootPos = new Doomeroids::CreatureDescriptions::FootPosDataTable();
        this->Tables->Add(this->tableFootPos);
        this->tableBBox = new Doomeroids::CreatureDescriptions::BBoxDataTable();
        this->Tables->Add(this->tableBBox);
        this->tableWeapon = new Doomeroids::CreatureDescriptions::WeaponDataTable();
        this->Tables->Add(this->tableWeapon);
        System::Data::ForeignKeyConstraint *  fkc;
        System::Data::DataColumn* __mcTemp__1[] = new System::Data::DataColumn*[1];
                        __mcTemp__1[0] = this->tableCreature->Creature_IdColumn;
            System::Data::DataColumn* __mcTemp__2[] = new System::Data::DataColumn*[1];
                        __mcTemp__2[0] = this->tableFootPos->Creature_IdColumn;
        fkc = new System::Data::ForeignKeyConstraint(S"Creature_FootPos", __mcTemp__1, __mcTemp__2);
        this->tableFootPos->Constraints->Add(fkc);
        fkc->AcceptRejectRule = System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = System::Data::Rule::Cascade;
        fkc->UpdateRule = System::Data::Rule::Cascade;
        System::Data::DataColumn* __mcTemp__3[] = new System::Data::DataColumn*[1];
                        __mcTemp__3[0] = this->tableCreature->Creature_IdColumn;
            System::Data::DataColumn* __mcTemp__4[] = new System::Data::DataColumn*[1];
                        __mcTemp__4[0] = this->tableBBox->Creature_IdColumn;
        fkc = new System::Data::ForeignKeyConstraint(S"Creature_BBox", __mcTemp__3, __mcTemp__4);
        this->tableBBox->Constraints->Add(fkc);
        fkc->AcceptRejectRule = System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = System::Data::Rule::Cascade;
        fkc->UpdateRule = System::Data::Rule::Cascade;
        System::Data::DataColumn* __mcTemp__5[] = new System::Data::DataColumn*[1];
                        __mcTemp__5[0] = this->tableCreature->Creature_IdColumn;
            System::Data::DataColumn* __mcTemp__6[] = new System::Data::DataColumn*[1];
                        __mcTemp__6[0] = this->tableWeapon->Creature_IdColumn;
        fkc = new System::Data::ForeignKeyConstraint(S"Creature_Weapon", __mcTemp__5, __mcTemp__6);
        this->tableWeapon->Constraints->Add(fkc);
        fkc->AcceptRejectRule = System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = System::Data::Rule::Cascade;
        fkc->UpdateRule = System::Data::Rule::Cascade;
        System::Data::DataColumn* __mcTemp__7[] = new System::Data::DataColumn*[1];
                        __mcTemp__7[0] = this->tableCreature->Creature_IdColumn;
            System::Data::DataColumn* __mcTemp__8[] = new System::Data::DataColumn*[1];
                        __mcTemp__8[0] = this->tableFootPos->Creature_IdColumn;
        this->relationCreature_FootPos = new System::Data::DataRelation(S"Creature_FootPos", __mcTemp__7, __mcTemp__8, false);
        this->relationCreature_FootPos->Nested = true;
        this->Relations->Add(this->relationCreature_FootPos);
        System::Data::DataColumn* __mcTemp__9[] = new System::Data::DataColumn*[1];
                        __mcTemp__9[0] = this->tableCreature->Creature_IdColumn;
            System::Data::DataColumn* __mcTemp__10[] = new System::Data::DataColumn*[1];
                        __mcTemp__10[0] = this->tableBBox->Creature_IdColumn;
        this->relationCreature_BBox = new System::Data::DataRelation(S"Creature_BBox", __mcTemp__9, __mcTemp__10, false);
        this->relationCreature_BBox->Nested = true;
        this->Relations->Add(this->relationCreature_BBox);
        System::Data::DataColumn* __mcTemp__11[] = new System::Data::DataColumn*[1];
                        __mcTemp__11[0] = this->tableCreature->Creature_IdColumn;
            System::Data::DataColumn* __mcTemp__12[] = new System::Data::DataColumn*[1];
                        __mcTemp__12[0] = this->tableWeapon->Creature_IdColumn;
        this->relationCreature_Weapon = new System::Data::DataRelation(S"Creature_Weapon", __mcTemp__11, __mcTemp__12, false);
        this->relationCreature_Weapon->Nested = true;
        this->Relations->Add(this->relationCreature_Weapon);
    };
    
    inline System::Boolean CreatureDescriptions::ShouldSerializeCreature() {
        return false;
    };
    
    inline System::Boolean CreatureDescriptions::ShouldSerializeFootPos() {
        return false;
    };
    
    inline System::Boolean CreatureDescriptions::ShouldSerializeBBox() {
        return false;
    };
    
    inline System::Boolean CreatureDescriptions::ShouldSerializeWeapon() {
        return false;
    };
    
    inline System::Void CreatureDescriptions::SchemaChanged(System::Object *  sender, System::ComponentModel::CollectionChangeEventArgs *  e) {
        if ((e->Action == System::ComponentModel::CollectionChangeAction::Remove)) {
            this->InitVars();
        }
    };
    
    
    
    
    
    
    
    
    
    
    inline CreatureDescriptions::CreatureDataTable::CreatureDataTable() : 
            DataTable(S"Creature") {
        this->InitClass();
    }
    
    inline CreatureDescriptions::CreatureDataTable::CreatureDataTable(System::Data::DataTable *  table) : 
            DataTable(table->TableName) {
        if ((table->CaseSensitive != table->DataSet->CaseSensitive)) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if ((table->Locale->ToString() != table->DataSet->Locale->ToString())) {
            this->Locale = table->Locale;
        }
        if ((table->Namespace != table->DataSet->Namespace)) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
        this->DisplayExpression = table->DisplayExpression;
    }
    
    inline System::Int32 CreatureDescriptions::CreatureDataTable::get_Count() {
        return this->Rows->Count;
    }
    
    inline System::Data::DataColumn *  CreatureDescriptions::CreatureDataTable::get_typeColumn() {
        return this->columntype;
    }
    
    inline System::Data::DataColumn *  CreatureDescriptions::CreatureDataTable::get_NameColumn() {
        return this->columnName;
    }
    
    inline System::Data::DataColumn *  CreatureDescriptions::CreatureDataTable::get_HPColumn() {
        return this->columnHP;
    }
    
    inline System::Data::DataColumn *  CreatureDescriptions::CreatureDataTable::get_Creature_IdColumn() {
        return this->columnCreature_Id;
    }
    
    inline Doomeroids::CreatureDescriptions::CreatureRow *  CreatureDescriptions::CreatureDataTable::get_Item(System::Int32 index) {
        return (__try_cast<Doomeroids::CreatureDescriptions::CreatureRow *  >(this->Rows->Item[index]));
    }
    
    
    
    
    
    inline System::Void CreatureDescriptions::CreatureDataTable::AddCreatureRow(Doomeroids::CreatureDescriptions::CreatureRow *  row) {
        this->Rows->Add(row);
    };
    
    inline Doomeroids::CreatureDescriptions::CreatureRow *  CreatureDescriptions::CreatureDataTable::AddCreatureRow(System::String *  type, System::String *  Name, System::Int32 HP) {
        Doomeroids::CreatureDescriptions::CreatureRow *  rowCreatureRow = (__try_cast<Doomeroids::CreatureDescriptions::CreatureRow *  >(this->NewRow()));
        System::Object* __mcTemp__1[] = new System::Object*[4];
                __mcTemp__1[0] = type;
                __mcTemp__1[1] = Name;
                __mcTemp__1[2] = __box(HP);
                __mcTemp__1[3] = 0;
        rowCreatureRow->ItemArray = __mcTemp__1;
        this->Rows->Add(rowCreatureRow);
        return rowCreatureRow;
    };
    
    inline System::Collections::IEnumerator *  CreatureDescriptions::CreatureDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    };
    
    inline System::Data::DataTable *  CreatureDescriptions::CreatureDataTable::Clone() {
        Doomeroids::CreatureDescriptions::CreatureDataTable *  cln = (__try_cast<Doomeroids::CreatureDescriptions::CreatureDataTable *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Data::DataTable *  CreatureDescriptions::CreatureDataTable::CreateInstance() {
        return new Doomeroids::CreatureDescriptions::CreatureDataTable();
    };
    
    inline System::Void CreatureDescriptions::CreatureDataTable::InitVars() {
        this->columntype = this->Columns->Item[S"type"];
        this->columnName = this->Columns->Item[S"Name"];
        this->columnHP = this->Columns->Item[S"HP"];
        this->columnCreature_Id = this->Columns->Item[S"Creature_Id"];
    };
    
    inline System::Void CreatureDescriptions::CreatureDataTable::InitClass() {
        this->columntype = new System::Data::DataColumn(S"type", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columntype);
        this->columnName = new System::Data::DataColumn(S"Name", __typeof(System::String), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columnName);
        this->columnHP = new System::Data::DataColumn(S"HP", __typeof(System::Int32), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columnHP);
        this->columnCreature_Id = new System::Data::DataColumn(S"Creature_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columnCreature_Id);
        System::Data::DataColumn* __mcTemp__1[] = new System::Data::DataColumn*[1];
                        __mcTemp__1[0] = this->columnCreature_Id;
        this->Constraints->Add(new System::Data::UniqueConstraint(S"Constraint1", __mcTemp__1, true));
        this->columntype->Namespace = S"";
        this->columnName->AllowDBNull = false;
        this->columnHP->AllowDBNull = false;
        this->columnCreature_Id->AutoIncrement = true;
        this->columnCreature_Id->AllowDBNull = false;
        this->columnCreature_Id->Unique = true;
    };
    
    inline Doomeroids::CreatureDescriptions::CreatureRow *  CreatureDescriptions::CreatureDataTable::NewCreatureRow() {
        return (__try_cast<Doomeroids::CreatureDescriptions::CreatureRow *  >(this->NewRow()));
    };
    
    inline System::Data::DataRow *  CreatureDescriptions::CreatureDataTable::NewRowFromBuilder(System::Data::DataRowBuilder *  builder) {
        return new Doomeroids::CreatureDescriptions::CreatureRow(builder);
    };
    
    inline System::Type *  CreatureDescriptions::CreatureDataTable::GetRowType() {
        return __typeof(Doomeroids::CreatureDescriptions::CreatureRow);
    };
    
    inline System::Void CreatureDescriptions::CreatureDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanged(e);
        if ((this->CreatureRowChanged != 0)) {
            this->CreatureRowChanged(this, new Doomeroids::CreatureDescriptions::CreatureRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::CreatureRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::CreatureDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanging(e);
        if ((this->CreatureRowChanging != 0)) {
            this->CreatureRowChanging(this, new Doomeroids::CreatureDescriptions::CreatureRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::CreatureRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::CreatureDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleted(e);
        if ((this->CreatureRowDeleted != 0)) {
            this->CreatureRowDeleted(this, new Doomeroids::CreatureDescriptions::CreatureRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::CreatureRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::CreatureDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleting(e);
        if ((this->CreatureRowDeleting != 0)) {
            this->CreatureRowDeleting(this, new Doomeroids::CreatureDescriptions::CreatureRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::CreatureRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::CreatureDataTable::RemoveCreatureRow(Doomeroids::CreatureDescriptions::CreatureRow *  row) {
        this->Rows->Remove(row);
    };
    
    
    
    inline CreatureDescriptions::CreatureRow::CreatureRow(System::Data::DataRowBuilder *  rb) : 
            DataRow(rb) {
        this->tableCreature = (__try_cast<Doomeroids::CreatureDescriptions::CreatureDataTable *  >(this->Table));
    }
    
    inline System::String *  CreatureDescriptions::CreatureRow::get_type() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->tableCreature->typeColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void CreatureDescriptions::CreatureRow::set_type(System::String *  value) {
        this->Item[this->tableCreature->typeColumn] = value;
    }
    
    inline System::String *  CreatureDescriptions::CreatureRow::get_Name() {
        return (__try_cast<System::String *  >(this->Item[this->tableCreature->NameColumn]));
    }
    inline void CreatureDescriptions::CreatureRow::set_Name(System::String *  value) {
        this->Item[this->tableCreature->NameColumn] = value;
    }
    
    inline System::Int32 CreatureDescriptions::CreatureRow::get_HP() {
        return (*__try_cast<__box System::Int32 *  >(this->Item[this->tableCreature->HPColumn]));
    }
    inline void CreatureDescriptions::CreatureRow::set_HP(System::Int32 value) {
        this->Item[this->tableCreature->HPColumn] = __box(value);
    }
    
    inline System::Boolean CreatureDescriptions::CreatureRow::IstypeNull() {
        return this->IsNull(this->tableCreature->typeColumn);
    };
    
    inline System::Void CreatureDescriptions::CreatureRow::SettypeNull() {
        this->Item[this->tableCreature->typeColumn] = System::Convert::DBNull;
    };
    
    inline Doomeroids::CreatureDescriptions::FootPosRow *  CreatureDescriptions::CreatureRow::GetFootPosRows()[] {
        return (__try_cast<Doomeroids::CreatureDescriptions::FootPosRow * [] >(this->GetChildRows(this->Table->ChildRelations->Item[S"Creature_FootPos"])));
    };
    
    inline Doomeroids::CreatureDescriptions::BBoxRow *  CreatureDescriptions::CreatureRow::GetBBoxRows()[] {
        return (__try_cast<Doomeroids::CreatureDescriptions::BBoxRow * [] >(this->GetChildRows(this->Table->ChildRelations->Item[S"Creature_BBox"])));
    };
    
    inline Doomeroids::CreatureDescriptions::WeaponRow *  CreatureDescriptions::CreatureRow::GetWeaponRows()[] {
        return (__try_cast<Doomeroids::CreatureDescriptions::WeaponRow * [] >(this->GetChildRows(this->Table->ChildRelations->Item[S"Creature_Weapon"])));
    };
    
    
    
    
    inline CreatureDescriptions::CreatureRowChangeEvent::CreatureRowChangeEvent(Doomeroids::CreatureDescriptions::CreatureRow *  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline Doomeroids::CreatureDescriptions::CreatureRow *  CreatureDescriptions::CreatureRowChangeEvent::get_Row() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction CreatureDescriptions::CreatureRowChangeEvent::get_Action() {
        return this->eventAction;
    }
    
    
    
    
    
    inline CreatureDescriptions::FootPosDataTable::FootPosDataTable() : 
            DataTable(S"FootPos") {
        this->InitClass();
    }
    
    inline CreatureDescriptions::FootPosDataTable::FootPosDataTable(System::Data::DataTable *  table) : 
            DataTable(table->TableName) {
        if ((table->CaseSensitive != table->DataSet->CaseSensitive)) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if ((table->Locale->ToString() != table->DataSet->Locale->ToString())) {
            this->Locale = table->Locale;
        }
        if ((table->Namespace != table->DataSet->Namespace)) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
        this->DisplayExpression = table->DisplayExpression;
    }
    
    inline System::Int32 CreatureDescriptions::FootPosDataTable::get_Count() {
        return this->Rows->Count;
    }
    
    inline System::Data::DataColumn *  CreatureDescriptions::FootPosDataTable::get_xColumn() {
        return this->columnx;
    }
    
    inline System::Data::DataColumn *  CreatureDescriptions::FootPosDataTable::get_yColumn() {
        return this->columny;
    }
    
    inline System::Data::DataColumn *  CreatureDescriptions::FootPosDataTable::get_Creature_IdColumn() {
        return this->columnCreature_Id;
    }
    
    inline Doomeroids::CreatureDescriptions::FootPosRow *  CreatureDescriptions::FootPosDataTable::get_Item(System::Int32 index) {
        return (__try_cast<Doomeroids::CreatureDescriptions::FootPosRow *  >(this->Rows->Item[index]));
    }
    
    
    
    
    
    inline System::Void CreatureDescriptions::FootPosDataTable::AddFootPosRow(Doomeroids::CreatureDescriptions::FootPosRow *  row) {
        this->Rows->Add(row);
    };
    
    inline Doomeroids::CreatureDescriptions::FootPosRow *  CreatureDescriptions::FootPosDataTable::AddFootPosRow(System::Int32 x, System::Int32 y, Doomeroids::CreatureDescriptions::CreatureRow *  parentCreatureRowByCreature_FootPos) {
        Doomeroids::CreatureDescriptions::FootPosRow *  rowFootPosRow = (__try_cast<Doomeroids::CreatureDescriptions::FootPosRow *  >(this->NewRow()));
        System::Object* __mcTemp__1[] = new System::Object*[3];
                __mcTemp__1[0] = __box(x);
                __mcTemp__1[1] = __box(y);
                __mcTemp__1[2] = parentCreatureRowByCreature_FootPos->Item[3];
        rowFootPosRow->ItemArray = __mcTemp__1;
        this->Rows->Add(rowFootPosRow);
        return rowFootPosRow;
    };
    
    inline System::Collections::IEnumerator *  CreatureDescriptions::FootPosDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    };
    
    inline System::Data::DataTable *  CreatureDescriptions::FootPosDataTable::Clone() {
        Doomeroids::CreatureDescriptions::FootPosDataTable *  cln = (__try_cast<Doomeroids::CreatureDescriptions::FootPosDataTable *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Data::DataTable *  CreatureDescriptions::FootPosDataTable::CreateInstance() {
        return new Doomeroids::CreatureDescriptions::FootPosDataTable();
    };
    
    inline System::Void CreatureDescriptions::FootPosDataTable::InitVars() {
        this->columnx = this->Columns->Item[S"x"];
        this->columny = this->Columns->Item[S"y"];
        this->columnCreature_Id = this->Columns->Item[S"Creature_Id"];
    };
    
    inline System::Void CreatureDescriptions::FootPosDataTable::InitClass() {
        this->columnx = new System::Data::DataColumn(S"x", __typeof(System::Int32), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columnx);
        this->columny = new System::Data::DataColumn(S"y", __typeof(System::Int32), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columny);
        this->columnCreature_Id = new System::Data::DataColumn(S"Creature_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columnCreature_Id);
        this->columnx->Namespace = S"";
        this->columny->Namespace = S"";
    };
    
    inline Doomeroids::CreatureDescriptions::FootPosRow *  CreatureDescriptions::FootPosDataTable::NewFootPosRow() {
        return (__try_cast<Doomeroids::CreatureDescriptions::FootPosRow *  >(this->NewRow()));
    };
    
    inline System::Data::DataRow *  CreatureDescriptions::FootPosDataTable::NewRowFromBuilder(System::Data::DataRowBuilder *  builder) {
        return new Doomeroids::CreatureDescriptions::FootPosRow(builder);
    };
    
    inline System::Type *  CreatureDescriptions::FootPosDataTable::GetRowType() {
        return __typeof(Doomeroids::CreatureDescriptions::FootPosRow);
    };
    
    inline System::Void CreatureDescriptions::FootPosDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanged(e);
        if ((this->FootPosRowChanged != 0)) {
            this->FootPosRowChanged(this, new Doomeroids::CreatureDescriptions::FootPosRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::FootPosRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::FootPosDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanging(e);
        if ((this->FootPosRowChanging != 0)) {
            this->FootPosRowChanging(this, new Doomeroids::CreatureDescriptions::FootPosRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::FootPosRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::FootPosDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleted(e);
        if ((this->FootPosRowDeleted != 0)) {
            this->FootPosRowDeleted(this, new Doomeroids::CreatureDescriptions::FootPosRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::FootPosRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::FootPosDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleting(e);
        if ((this->FootPosRowDeleting != 0)) {
            this->FootPosRowDeleting(this, new Doomeroids::CreatureDescriptions::FootPosRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::FootPosRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::FootPosDataTable::RemoveFootPosRow(Doomeroids::CreatureDescriptions::FootPosRow *  row) {
        this->Rows->Remove(row);
    };
    
    
    
    inline CreatureDescriptions::FootPosRow::FootPosRow(System::Data::DataRowBuilder *  rb) : 
            DataRow(rb) {
        this->tableFootPos = (__try_cast<Doomeroids::CreatureDescriptions::FootPosDataTable *  >(this->Table));
    }
    
    inline System::Int32 CreatureDescriptions::FootPosRow::get_x() {
        try {
            return (*__try_cast<__box System::Int32 *  >(this->Item[this->tableFootPos->xColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void CreatureDescriptions::FootPosRow::set_x(System::Int32 value) {
        this->Item[this->tableFootPos->xColumn] = __box(value);
    }
    
    inline System::Int32 CreatureDescriptions::FootPosRow::get_y() {
        try {
            return (*__try_cast<__box System::Int32 *  >(this->Item[this->tableFootPos->yColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void CreatureDescriptions::FootPosRow::set_y(System::Int32 value) {
        this->Item[this->tableFootPos->yColumn] = __box(value);
    }
    
    inline Doomeroids::CreatureDescriptions::CreatureRow *  CreatureDescriptions::FootPosRow::get_CreatureRow() {
        return (__try_cast<Doomeroids::CreatureDescriptions::CreatureRow *  >(this->GetParentRow(this->Table->ParentRelations->Item[S"Creature_FootPos"])));
    }
    inline void CreatureDescriptions::FootPosRow::set_CreatureRow(Doomeroids::CreatureDescriptions::CreatureRow *  value) {
        this->SetParentRow(value, this->Table->ParentRelations->Item[S"Creature_FootPos"]);
    }
    
    inline System::Boolean CreatureDescriptions::FootPosRow::IsxNull() {
        return this->IsNull(this->tableFootPos->xColumn);
    };
    
    inline System::Void CreatureDescriptions::FootPosRow::SetxNull() {
        this->Item[this->tableFootPos->xColumn] = System::Convert::DBNull;
    };
    
    inline System::Boolean CreatureDescriptions::FootPosRow::IsyNull() {
        return this->IsNull(this->tableFootPos->yColumn);
    };
    
    inline System::Void CreatureDescriptions::FootPosRow::SetyNull() {
        this->Item[this->tableFootPos->yColumn] = System::Convert::DBNull;
    };
    
    
    
    
    inline CreatureDescriptions::FootPosRowChangeEvent::FootPosRowChangeEvent(Doomeroids::CreatureDescriptions::FootPosRow *  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline Doomeroids::CreatureDescriptions::FootPosRow *  CreatureDescriptions::FootPosRowChangeEvent::get_Row() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction CreatureDescriptions::FootPosRowChangeEvent::get_Action() {
        return this->eventAction;
    }
    
    
    
    
    
    inline CreatureDescriptions::BBoxDataTable::BBoxDataTable() : 
            DataTable(S"BBox") {
        this->InitClass();
    }
    
    inline CreatureDescriptions::BBoxDataTable::BBoxDataTable(System::Data::DataTable *  table) : 
            DataTable(table->TableName) {
        if ((table->CaseSensitive != table->DataSet->CaseSensitive)) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if ((table->Locale->ToString() != table->DataSet->Locale->ToString())) {
            this->Locale = table->Locale;
        }
        if ((table->Namespace != table->DataSet->Namespace)) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
        this->DisplayExpression = table->DisplayExpression;
    }
    
    inline System::Int32 CreatureDescriptions::BBoxDataTable::get_Count() {
        return this->Rows->Count;
    }
    
    inline System::Data::DataColumn *  CreatureDescriptions::BBoxDataTable::get_xColumn() {
        return this->columnx;
    }
    
    inline System::Data::DataColumn *  CreatureDescriptions::BBoxDataTable::get_yColumn() {
        return this->columny;
    }
    
    inline System::Data::DataColumn *  CreatureDescriptions::BBoxDataTable::get_Creature_IdColumn() {
        return this->columnCreature_Id;
    }
    
    inline Doomeroids::CreatureDescriptions::BBoxRow *  CreatureDescriptions::BBoxDataTable::get_Item(System::Int32 index) {
        return (__try_cast<Doomeroids::CreatureDescriptions::BBoxRow *  >(this->Rows->Item[index]));
    }
    
    
    
    
    
    inline System::Void CreatureDescriptions::BBoxDataTable::AddBBoxRow(Doomeroids::CreatureDescriptions::BBoxRow *  row) {
        this->Rows->Add(row);
    };
    
    inline Doomeroids::CreatureDescriptions::BBoxRow *  CreatureDescriptions::BBoxDataTable::AddBBoxRow(System::Int32 x, System::Int32 y, Doomeroids::CreatureDescriptions::CreatureRow *  parentCreatureRowByCreature_BBox) {
        Doomeroids::CreatureDescriptions::BBoxRow *  rowBBoxRow = (__try_cast<Doomeroids::CreatureDescriptions::BBoxRow *  >(this->NewRow()));
        System::Object* __mcTemp__1[] = new System::Object*[3];
                __mcTemp__1[0] = __box(x);
                __mcTemp__1[1] = __box(y);
                __mcTemp__1[2] = parentCreatureRowByCreature_BBox->Item[3];
        rowBBoxRow->ItemArray = __mcTemp__1;
        this->Rows->Add(rowBBoxRow);
        return rowBBoxRow;
    };
    
    inline System::Collections::IEnumerator *  CreatureDescriptions::BBoxDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    };
    
    inline System::Data::DataTable *  CreatureDescriptions::BBoxDataTable::Clone() {
        Doomeroids::CreatureDescriptions::BBoxDataTable *  cln = (__try_cast<Doomeroids::CreatureDescriptions::BBoxDataTable *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Data::DataTable *  CreatureDescriptions::BBoxDataTable::CreateInstance() {
        return new Doomeroids::CreatureDescriptions::BBoxDataTable();
    };
    
    inline System::Void CreatureDescriptions::BBoxDataTable::InitVars() {
        this->columnx = this->Columns->Item[S"x"];
        this->columny = this->Columns->Item[S"y"];
        this->columnCreature_Id = this->Columns->Item[S"Creature_Id"];
    };
    
    inline System::Void CreatureDescriptions::BBoxDataTable::InitClass() {
        this->columnx = new System::Data::DataColumn(S"x", __typeof(System::Int32), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columnx);
        this->columny = new System::Data::DataColumn(S"y", __typeof(System::Int32), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columny);
        this->columnCreature_Id = new System::Data::DataColumn(S"Creature_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columnCreature_Id);
        this->columnx->Namespace = S"";
        this->columny->Namespace = S"";
    };
    
    inline Doomeroids::CreatureDescriptions::BBoxRow *  CreatureDescriptions::BBoxDataTable::NewBBoxRow() {
        return (__try_cast<Doomeroids::CreatureDescriptions::BBoxRow *  >(this->NewRow()));
    };
    
    inline System::Data::DataRow *  CreatureDescriptions::BBoxDataTable::NewRowFromBuilder(System::Data::DataRowBuilder *  builder) {
        return new Doomeroids::CreatureDescriptions::BBoxRow(builder);
    };
    
    inline System::Type *  CreatureDescriptions::BBoxDataTable::GetRowType() {
        return __typeof(Doomeroids::CreatureDescriptions::BBoxRow);
    };
    
    inline System::Void CreatureDescriptions::BBoxDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanged(e);
        if ((this->BBoxRowChanged != 0)) {
            this->BBoxRowChanged(this, new Doomeroids::CreatureDescriptions::BBoxRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::BBoxRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::BBoxDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanging(e);
        if ((this->BBoxRowChanging != 0)) {
            this->BBoxRowChanging(this, new Doomeroids::CreatureDescriptions::BBoxRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::BBoxRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::BBoxDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleted(e);
        if ((this->BBoxRowDeleted != 0)) {
            this->BBoxRowDeleted(this, new Doomeroids::CreatureDescriptions::BBoxRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::BBoxRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::BBoxDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleting(e);
        if ((this->BBoxRowDeleting != 0)) {
            this->BBoxRowDeleting(this, new Doomeroids::CreatureDescriptions::BBoxRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::BBoxRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::BBoxDataTable::RemoveBBoxRow(Doomeroids::CreatureDescriptions::BBoxRow *  row) {
        this->Rows->Remove(row);
    };
    
    
    
    inline CreatureDescriptions::BBoxRow::BBoxRow(System::Data::DataRowBuilder *  rb) : 
            DataRow(rb) {
        this->tableBBox = (__try_cast<Doomeroids::CreatureDescriptions::BBoxDataTable *  >(this->Table));
    }
    
    inline System::Int32 CreatureDescriptions::BBoxRow::get_x() {
        try {
            return (*__try_cast<__box System::Int32 *  >(this->Item[this->tableBBox->xColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void CreatureDescriptions::BBoxRow::set_x(System::Int32 value) {
        this->Item[this->tableBBox->xColumn] = __box(value);
    }
    
    inline System::Int32 CreatureDescriptions::BBoxRow::get_y() {
        try {
            return (*__try_cast<__box System::Int32 *  >(this->Item[this->tableBBox->yColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void CreatureDescriptions::BBoxRow::set_y(System::Int32 value) {
        this->Item[this->tableBBox->yColumn] = __box(value);
    }
    
    inline Doomeroids::CreatureDescriptions::CreatureRow *  CreatureDescriptions::BBoxRow::get_CreatureRow() {
        return (__try_cast<Doomeroids::CreatureDescriptions::CreatureRow *  >(this->GetParentRow(this->Table->ParentRelations->Item[S"Creature_BBox"])));
    }
    inline void CreatureDescriptions::BBoxRow::set_CreatureRow(Doomeroids::CreatureDescriptions::CreatureRow *  value) {
        this->SetParentRow(value, this->Table->ParentRelations->Item[S"Creature_BBox"]);
    }
    
    inline System::Boolean CreatureDescriptions::BBoxRow::IsxNull() {
        return this->IsNull(this->tableBBox->xColumn);
    };
    
    inline System::Void CreatureDescriptions::BBoxRow::SetxNull() {
        this->Item[this->tableBBox->xColumn] = System::Convert::DBNull;
    };
    
    inline System::Boolean CreatureDescriptions::BBoxRow::IsyNull() {
        return this->IsNull(this->tableBBox->yColumn);
    };
    
    inline System::Void CreatureDescriptions::BBoxRow::SetyNull() {
        this->Item[this->tableBBox->yColumn] = System::Convert::DBNull;
    };
    
    
    
    
    inline CreatureDescriptions::BBoxRowChangeEvent::BBoxRowChangeEvent(Doomeroids::CreatureDescriptions::BBoxRow *  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline Doomeroids::CreatureDescriptions::BBoxRow *  CreatureDescriptions::BBoxRowChangeEvent::get_Row() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction CreatureDescriptions::BBoxRowChangeEvent::get_Action() {
        return this->eventAction;
    }
    
    
    
    
    inline CreatureDescriptions::WeaponDataTable::WeaponDataTable() : 
            DataTable(S"Weapon") {
        this->InitClass();
    }
    
    inline CreatureDescriptions::WeaponDataTable::WeaponDataTable(System::Data::DataTable *  table) : 
            DataTable(table->TableName) {
        if ((table->CaseSensitive != table->DataSet->CaseSensitive)) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if ((table->Locale->ToString() != table->DataSet->Locale->ToString())) {
            this->Locale = table->Locale;
        }
        if ((table->Namespace != table->DataSet->Namespace)) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
        this->DisplayExpression = table->DisplayExpression;
    }
    
    inline System::Int32 CreatureDescriptions::WeaponDataTable::get_Count() {
        return this->Rows->Count;
    }
    
    inline System::Data::DataColumn *  CreatureDescriptions::WeaponDataTable::get_Weapon_TextColumn() {
        return this->columnWeapon_Text;
    }
    
    inline System::Data::DataColumn *  CreatureDescriptions::WeaponDataTable::get_Creature_IdColumn() {
        return this->columnCreature_Id;
    }
    
    inline Doomeroids::CreatureDescriptions::WeaponRow *  CreatureDescriptions::WeaponDataTable::get_Item(System::Int32 index) {
        return (__try_cast<Doomeroids::CreatureDescriptions::WeaponRow *  >(this->Rows->Item[index]));
    }
    
    
    
    
    
    inline System::Void CreatureDescriptions::WeaponDataTable::AddWeaponRow(Doomeroids::CreatureDescriptions::WeaponRow *  row) {
        this->Rows->Add(row);
    };
    
    inline Doomeroids::CreatureDescriptions::WeaponRow *  CreatureDescriptions::WeaponDataTable::AddWeaponRow(System::String *  Weapon_Text, Doomeroids::CreatureDescriptions::CreatureRow *  parentCreatureRowByCreature_Weapon) {
        Doomeroids::CreatureDescriptions::WeaponRow *  rowWeaponRow = (__try_cast<Doomeroids::CreatureDescriptions::WeaponRow *  >(this->NewRow()));
        System::Object* __mcTemp__1[] = new System::Object*[2];
                __mcTemp__1[0] = Weapon_Text;
                __mcTemp__1[1] = parentCreatureRowByCreature_Weapon->Item[3];
        rowWeaponRow->ItemArray = __mcTemp__1;
        this->Rows->Add(rowWeaponRow);
        return rowWeaponRow;
    };
    
    inline System::Collections::IEnumerator *  CreatureDescriptions::WeaponDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    };
    
    inline System::Data::DataTable *  CreatureDescriptions::WeaponDataTable::Clone() {
        Doomeroids::CreatureDescriptions::WeaponDataTable *  cln = (__try_cast<Doomeroids::CreatureDescriptions::WeaponDataTable *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Data::DataTable *  CreatureDescriptions::WeaponDataTable::CreateInstance() {
        return new Doomeroids::CreatureDescriptions::WeaponDataTable();
    };
    
    inline System::Void CreatureDescriptions::WeaponDataTable::InitVars() {
        this->columnWeapon_Text = this->Columns->Item[S"Weapon_Text"];
        this->columnCreature_Id = this->Columns->Item[S"Creature_Id"];
    };
    
    inline System::Void CreatureDescriptions::WeaponDataTable::InitClass() {
        this->columnWeapon_Text = new System::Data::DataColumn(S"Weapon_Text", __typeof(System::String), 0, System::Data::MappingType::SimpleContent);
        this->Columns->Add(this->columnWeapon_Text);
        this->columnCreature_Id = new System::Data::DataColumn(S"Creature_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columnCreature_Id);
    };
    
    inline Doomeroids::CreatureDescriptions::WeaponRow *  CreatureDescriptions::WeaponDataTable::NewWeaponRow() {
        return (__try_cast<Doomeroids::CreatureDescriptions::WeaponRow *  >(this->NewRow()));
    };
    
    inline System::Data::DataRow *  CreatureDescriptions::WeaponDataTable::NewRowFromBuilder(System::Data::DataRowBuilder *  builder) {
        return new Doomeroids::CreatureDescriptions::WeaponRow(builder);
    };
    
    inline System::Type *  CreatureDescriptions::WeaponDataTable::GetRowType() {
        return __typeof(Doomeroids::CreatureDescriptions::WeaponRow);
    };
    
    inline System::Void CreatureDescriptions::WeaponDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanged(e);
        if ((this->WeaponRowChanged != 0)) {
            this->WeaponRowChanged(this, new Doomeroids::CreatureDescriptions::WeaponRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::WeaponRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::WeaponDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanging(e);
        if ((this->WeaponRowChanging != 0)) {
            this->WeaponRowChanging(this, new Doomeroids::CreatureDescriptions::WeaponRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::WeaponRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::WeaponDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleted(e);
        if ((this->WeaponRowDeleted != 0)) {
            this->WeaponRowDeleted(this, new Doomeroids::CreatureDescriptions::WeaponRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::WeaponRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::WeaponDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleting(e);
        if ((this->WeaponRowDeleting != 0)) {
            this->WeaponRowDeleting(this, new Doomeroids::CreatureDescriptions::WeaponRowChangeEvent((__try_cast<Doomeroids::CreatureDescriptions::WeaponRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CreatureDescriptions::WeaponDataTable::RemoveWeaponRow(Doomeroids::CreatureDescriptions::WeaponRow *  row) {
        this->Rows->Remove(row);
    };
    
    
    
    inline CreatureDescriptions::WeaponRow::WeaponRow(System::Data::DataRowBuilder *  rb) : 
            DataRow(rb) {
        this->tableWeapon = (__try_cast<Doomeroids::CreatureDescriptions::WeaponDataTable *  >(this->Table));
    }
    
    inline System::String *  CreatureDescriptions::WeaponRow::get_Weapon_Text() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->tableWeapon->Weapon_TextColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void CreatureDescriptions::WeaponRow::set_Weapon_Text(System::String *  value) {
        this->Item[this->tableWeapon->Weapon_TextColumn] = value;
    }
    
    inline Doomeroids::CreatureDescriptions::CreatureRow *  CreatureDescriptions::WeaponRow::get_CreatureRow() {
        return (__try_cast<Doomeroids::CreatureDescriptions::CreatureRow *  >(this->GetParentRow(this->Table->ParentRelations->Item[S"Creature_Weapon"])));
    }
    inline void CreatureDescriptions::WeaponRow::set_CreatureRow(Doomeroids::CreatureDescriptions::CreatureRow *  value) {
        this->SetParentRow(value, this->Table->ParentRelations->Item[S"Creature_Weapon"]);
    }
    
    inline System::Boolean CreatureDescriptions::WeaponRow::IsWeapon_TextNull() {
        return this->IsNull(this->tableWeapon->Weapon_TextColumn);
    };
    
    inline System::Void CreatureDescriptions::WeaponRow::SetWeapon_TextNull() {
        this->Item[this->tableWeapon->Weapon_TextColumn] = System::Convert::DBNull;
    };
    
    
    
    
    inline CreatureDescriptions::WeaponRowChangeEvent::WeaponRowChangeEvent(Doomeroids::CreatureDescriptions::WeaponRow *  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline Doomeroids::CreatureDescriptions::WeaponRow *  CreatureDescriptions::WeaponRowChangeEvent::get_Row() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction CreatureDescriptions::WeaponRowChangeEvent::get_Action() {
        return this->eventAction;
    }
}
